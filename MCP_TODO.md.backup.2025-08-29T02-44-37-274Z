# MCP Server Integration Todos

## 1. Research and Design

- [ ] Analyze MCP protocol specification and requirements
- [x] Review existing experimental MCP implementation in codebase âœ… TEST EDIT
- [ ] Design MCP server communication layer as separate mechanism from providers
- [ ] Define configuration schema for MCP servers (command, args, timeout, etc.)
- [ ] TEST ITEM: Verify editing functionality works properly

## 2. Core Implementation

- [ ] Create MCPManager.ts in src/providers/utils/ or new src/mcp/ directory
- [ ] Implement MCP client communication layer
- [ ] Add tool discovery and execution capabilities
- [ ] Handle MCP server process management (start/stop)
- [ ] Integrate MCP tools with fosscode's tool execution system

## 3. Configuration Management

- [ ] Extend config schema to support MCP server settings
- [ ] Implement ~/.config/fosscode/mcp.d/ directory structure for multiple server configs
- [ ] Support reading multiple MCP server config files from ~/.config/fosscode/mcp.d/
- [ ] Define file naming conventions for MCP server configs (e.g., server-name.json)
- [ ] Update config.example.json with MCP configuration examples
- [ ] Add validation for MCP server commands and arguments
- [ ] Implement secure storage for MCP-specific settings
- [ ] Add MCP server config discovery and loading mechanism

## 4. Authentication and Security

- [ ] Implement MCP server authentication mechanisms
- [ ] Add security checks for MCP server processes
- [ ] Handle MCP server permissions and sandboxing
- [ ] Add timeout and resource limit controls

## 5. Testing and Integration

- [ ] Test with Playwright MCP server as primary use case
- [ ] Create unit tests for MCP manager functionality
- [ ] Add integration tests with sample MCP servers
- [ ] Update documentation with MCP setup instructions

## 6. Documentation and User Experience

- [ ] Update README.md with MCP support details
- [ ] Add MCP server configuration command
- [ ] Create MCP server configuration examples
- [ ] Add verbose mode support for MCP tool execution
- [ ] Implement /mcp command for enabling/disabling servers in chat
- [ ] Add --mcp command line flag for enabling specific servers (e.g., --mcp playwright,context7)
- [ ] Ensure MCP servers are off by default
- [ ] Implement last-setting persistence for /mcp menu selections

## 7. Deployment and Packaging

- [ ] Ensure MCP dependencies are properly bundled
- [ ] Update Docker configuration for MCP server access
- [ ] Test MCP functionality in containerized environments
- [ ] Update build scripts to include MCP-related binaries if needed
